{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n\n  const [state, setState] = useState(() => {\n    try {\n      const value = localStorage.getItem(key);\n      return value ? JSON.parse(value) : initialValue;\n\n      if (!initialValue) {\n        return;\n      }\n    } catch (e) {\n      return initialValue;\n    }\n  });\n  useEffect(() => {\n    if (state) {\n      console.log(state);\n\n      try {\n        localStorage.setItem(key, JSON.stringify(state));\n        console.log(state);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [state]);\n  return [state, setState];\n};\n\n_s(useLocalStorage, \"oAJqiRoCqvncHmdaJFC2uwMcobI=\");","map":{"version":3,"sources":["/Users/madibikamalov/Desktop/my-app/src/tools/useLocalStorage.tsx"],"names":["useState","useEffect","useLocalStorage","key","initialValue","state","setState","value","localStorage","getItem","JSON","parse","e","console","log","setItem","stringify"],"mappings":";;AAAA,SAAeA,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AAOA,OAAO,MAAMC,eAAe,GAAG,CAAMC,GAAN,EAAmBC,YAAnB,KAAwD;AAAA;;AACnF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAgB,MAAI;AAClD,QAAG;AACC,YAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAd;AACA,aAAOI,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAH,GAAuBH,YAAnC;;AACA,UAAI,CAACA,YAAL,EAAkB;AACd;AACH;AACJ,KAND,CAMC,OAAOQ,CAAP,EAAU;AACP,aAAOR,YAAP;AACH;AACJ,GAViC,CAAlC;AAYAH,EAAAA,SAAS,CAAC,MAAI;AACV,QAAII,KAAJ,EAAU;AACNQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;;AACA,UAAG;AACCG,QAAAA,YAAY,CAACO,OAAb,CAAqBZ,GAArB,EAA0BO,IAAI,CAACM,SAAL,CAAeX,KAAf,CAA1B;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACH,OAHD,CAGC,OAAOO,CAAP,EAAU;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;AACJ,GAVQ,EAUP,CAACP,KAAD,CAVO,CAAT;AAYA,SAAO,CAACA,KAAD,EAAOC,QAAP,CAAP;AACH,CA1BM;;GAAMJ,e","sourcesContent":["import React, {useState,useEffect} from 'react'\n\ntype ReturnType<T> = [\n    T | undefined,\n    React.Dispatch<React.SetStateAction<T | undefined>>\n]\n\nexport const useLocalStorage = <T,> (key: string, initialValue?: T) : ReturnType<T> => {\n    const [state, setState] = useState<T | undefined>(()=>{\n        try{\n            const value = localStorage.getItem(key);\n            return value ? JSON.parse(value) : initialValue;\n            if (!initialValue){\n                return;\n            }\n        }catch (e) {\n            return initialValue;\n        }\n    });\n\n    useEffect(()=>{\n        if (state){\n            console.log(state);\n            try{\n                localStorage.setItem(key, JSON.stringify(state))\n                console.log(state)\n            }catch (e) {\n                console.log(e)\n            }\n        }\n    },[state]);\n\n    return [state,setState]\n};\n\n"]},"metadata":{},"sourceType":"module"}