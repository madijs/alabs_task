{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n\n  const [state, setState] = useState(() => {\n    if (!initialValue) return;\n\n    try {\n      const value = localStorage.getItem(key);\n      console.log(value);\n      return value ? JSON.parse(value) : initialValue;\n    } catch (e) {\n      return initialValue;\n    }\n  });\n  useEffect(() => {\n    if (state) {\n      try {\n        localStorage.setItem(key, JSON.stringify(state));\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [state]);\n  return [state, setState];\n};\n\n_s(useLocalStorage, \"FOu7On3WczOtqsn1lyFBwN/njzk=\");","map":{"version":3,"sources":["/Users/madibikamalov/Desktop/my-app/src/tools/useLocalStorage.tsx"],"names":["useState","useEffect","useLocalStorage","key","initialValue","state","setState","value","localStorage","getItem","console","log","JSON","parse","e","setItem","stringify"],"mappings":";;AAAA,SAAeA,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AAOA,OAAO,MAAMC,eAAe,GAAG,CAAMC,GAAN,EAAmBC,YAAnB,KAAwD;AAAA;;AACnF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAgB,MAAI;AAClD,QAAI,CAACI,YAAL,EAAmB;;AACnB,QAAG;AACC,YAAMG,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,aAAOA,KAAK,GAAGK,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAH,GAAuBH,YAAnC;AAEH,KALD,CAKC,OAAOU,CAAP,EAAU;AACP,aAAOV,YAAP;AACH;AACJ,GAViC,CAAlC;AAYAH,EAAAA,SAAS,CAAC,MAAI;AACV,QAAII,KAAJ,EAAU;AACN,UAAG;AACCG,QAAAA,YAAY,CAACO,OAAb,CAAqBZ,GAArB,EAA0BS,IAAI,CAACI,SAAL,CAAeX,KAAf,CAA1B;AACH,OAFD,CAEC,OAAOS,CAAP,EAAU;AACPJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACH;AACJ;AACJ,GARQ,EAQP,CAACT,KAAD,CARO,CAAT;AAUA,SAAO,CAACA,KAAD,EAAOC,QAAP,CAAP;AACH,CAxBM;;GAAMJ,e","sourcesContent":["import React, {useState,useEffect} from 'react'\n\ntype ReturnType<T> = [\n    T | undefined,\n    React.Dispatch<React.SetStateAction<T | undefined>>\n]\n\nexport const useLocalStorage = <T,> (key: string, initialValue?: T) : ReturnType<T> => {\n    const [state, setState] = useState<T | undefined>(()=>{\n        if (!initialValue) return;\n        try{\n            const value = localStorage.getItem(key);\n            console.log(value);\n            return value ? JSON.parse(value) : initialValue;\n\n        }catch (e) {\n            return initialValue;\n        }\n    });\n\n    useEffect(()=>{\n        if (state){\n            try{\n                localStorage.setItem(key, JSON.stringify(state))\n            }catch (e) {\n                console.log(e)\n            }\n        }\n    },[state]);\n\n    return [state,setState]\n};\n\n"]},"metadata":{},"sourceType":"module"}